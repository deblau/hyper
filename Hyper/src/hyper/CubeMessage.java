package hyper;

import java.io.*;
import java.nio.ByteBuffer;
import java.nio.channels.Channels;
import java.nio.channels.SocketChannel;

/**
 * A Cube protocol message.
 */
class CubeMessage implements Serializable
{
	/**
	 * 
	 */
	private static final long serialVersionUID = -2640817563881316595L;

	static ByteBuffer buf = ByteBuffer.allocate(2048);

	// Message types
	public enum Type
	{
		// Invalid message
		INVALID_MSG,

		// Message from external client to ingress negotiation node (INN), requesting a CubeAddress
		// Data: InetSocketAddress of client's MessageListener
		CONN_EXT_INN_REQ,

		// Message from INN to other Cube nodes, asking recipients for ability and willingness to accept connection
		// Data: InetSocketAddress of client's MessageListener
		CONN_INN_BCAST,

		// Message from Cube node to INN, declaring ability and willingness to accept connection
		// Data: InetSocketAddress of client's MessageListener
		CONN_NODE_INN_ACK,

		// Message from Cube node to INN, declaring inability to accept a connection
		// Data: InetSocketAddress of client's MessageListener
		CONN_NODE_INN_UNABLE,

		// Message from Cube node to INN, declaring unwillingness to accept a connection
		// Data: InetSocketAddress of client's MessageListener
		CONN_NODE_INN_UNWILLING,

		// Message from INN to selected address negotiation node (ANN), tentatively handing off negotiation
		// Data: InetSocketAddress of client's MessageListener
		CONN_INN_ANN_HANDOFF,

		// Message from ANN to INN, declaring successful address negotiation
		// Data: InetSocketAddress of client's MessageListener
		CONN_ANN_INN_SUCC,

		// Message from ANN to INN, declaring unsuccessful address negotiation due to inability
		// Data: InetSocketAddress of client's MessageListener
		CONN_ANN_INN_UNABLE,

		// Message from ANN to INN, declaring unsuccessful address negotiation due to unwillingness
		// Data: InetSocketAddress of client's MessageListener
		CONN_ANN_INN_UNWILLING,

		// Message from INN to ANN, instructing attachment using a higher Cube dimension
		// Data: InetSocketAddress of client's MessageListener
		CONN_INN_ANN_EXPAND,

		// Message from INN to client, rejecting the connection
		CONN_INN_EXT_CONN_REFUSED,

		// Message from ANN to new neighbor, asking for willingness to accept connection
		// Data: InetSocketAddress of client's MessageListener
		CONN_ANN_NEI_REQ,

		// Message from new neighbor to ANN, declaring willingness to accept connection
		// Data: InetSocketAddress of client's MessageListener and a nonce generated by the neighbor
		CONN_NEI_ANN_ACK,

		// Message from new neighbor to ANN, declaring unwillingness to accept connection
		// Data: InetSocketAddress of client's MessageListener
		CONN_NEI_ANN_NAK,

		// Message (outside the Cube) from ANN to external client, offering it a new CubeAddress
		// Source: none
		// Dest: offered CubeAddress
		// Data: nonces generated by the new neighbors
		CONN_ANN_EXT_OFFER,

		// Message (outside the Cube) from external client to ANN, acknowledging (and accepting) the offer
		// Source: client's CubeAddress
		// Dest: none
		CONN_EXT_ANN_ACK,

		// Message from ANN to new neighbor, declaring negotiation a success
		// Data: InetSocketAddress of client's MessageListener and the nonce
		CONN_ANN_NEI_SUCC,

		// Message from ANN to new neighbor, declaring negotiation a failure
		// Data: InetSocketAddress of client's MessageListener
		CONN_ANN_NEI_FAIL,

		// Message (outside the Cube) from new neighbor to external client, offering to connect
		// Data: the cube's dimension
		CONN_NEI_EXT_OFFER,

		// Message (outside the Cube) from external client to new neighbor, accepting the connection
		// Source: client's CubeAddress
		// Dest: none
		// Data: the nonce
		CONN_EXT_NEI_ACK,

		// Message (outside the Cube) from new neighbor to external client, completing the handshake
		// Source: neighbor's CubeAddress
		// Dest: client's CubeAddress
		CONN_NEI_EXT_ACK,

		// Message from new neighbor to ANN, indicating successful connection
		// Data: InetSocketAddress of client's MessageListener
		CONN_NEI_ANN_SUCC,

		// Message from new neighbor to ANN, indicating failed connection
		// Data: InetSocketAddress of client's MessageListener
		CONN_NEI_ANN_FAIL,

		// Message requesting a route to a destination
		// Data: none (destination is stored in msg.dst)
		ROUTE_REQ,

		// Message stating the that destination is reachable
		// Data: destination
		ROUTE_RESP_RCHBL,

		// Message stating that the destination is unreachable
		// Data: destination
		ROUTE_RESP_UNRCH,

		// Message between community nodes, containing useful data
		// Data: arbitrary
		DATA_MSG,
	};

	// Source Cube address
	private CubeAddress src = CubeAddress.NO_ADDRESS;

	// Destination Cube address
	private CubeAddress dst = CubeAddress.NO_ADDRESS;

	// Is this a broadcast address?
	private boolean isBcast = false;

	// Type of message
	private Type type = Type.INVALID_MSG;

	// Payload data
	Object data = null;

	// The SocketChannel this Message came from, if any
	private SocketChannel channel = null;

	/*
	 * For sending regular messages when the source and destination already have Cube addresses
	 */
	public CubeMessage(CubeAddress src, CubeAddress dst, Type type, Object data)
	{
		this.src = src;
		this.dst = dst;
		this.type = type;
		this.data = data;
	}

	/**
	 * Send this message on a {@link SocketChannel}. Should be called only by the {@link CubeProtocol}.
	 * 
	 * @param chan
	 *            The {@link SocketChannel}
	 * @throws IOException
	 */
	void send(SocketChannel chan) throws IOException
	{
		new ObjectOutputStream(Channels.newOutputStream(chan)).writeObject(this);
	}

	/**
	 * Receive a message from a {@link SocketChannel}. Should be called only by the {@link MessageListener}.
	 * 
	 * @param chan
	 *            The {@link SocketChannel}
	 * @return the new {@link CubeMessage}
	 * @throws IOException
	 */
	static CubeMessage recv(SocketChannel chan) throws IOException
	{
		try
		{
			CubeMessage msg = (CubeMessage) new ObjectInputStream(Channels.newInputStream(chan)).readObject();
			msg.channel = chan; // We need this for the client's CubeProtocol to work
			return msg;
		}
		catch (ClassNotFoundException e)
		{
			e.printStackTrace();
			return null;
		}
	}

	public CubeAddress getSrc()
	{
		return src;
	}

	public CubeAddress getDst()
	{
		return dst;
	}

	public boolean isBcast()
	{
		return isBcast;
	}

	public Type getType()
	{
		return type;
	}

	public Object getData()
	{
		return data;
	}

	public SocketChannel getChannel()
	{
		return channel;
	}
}