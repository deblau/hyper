package hyper;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;

/**
 * A Cube protocol message.
 */
class CubeMessage implements Serializable
{
	/**
	 * 
	 */
	private static final long serialVersionUID = -2640817563881316595L;

	// Message types
	public enum Type {

		// Invalid message format
		// Src: varies
		// Dest: varies
		// Data: message type
		INVALID_MSG,

		// Invalid message data
		// Src: varies
		// Dest: varies
		// Data: varies
		INVALID_DATA,

		// Invalid protocol state
		// Src: varies
		// Dest: varies
		// Data: [current state, attempted transition state]
		INVALID_STATE,

		// Invalid Cube address
		// Src: the invalid address
		// Dst: the node that sent the message to the invalid address
		// Data: the original data
		INVALID_ADDRESS,

		/**
		 * Messages exchanged during multiple phases
		 */

		// Message (outside the Cube) from ingress negotiation node (INN) to client, rejecting a connection
		// Src: INVALID_ADDRESS
		// Dest: INVALID_ADDRESS
		// Data: null (could be extended to include a reason)
		CONN_INN_EXT_CONN_REFUSED,

		// Message from ANN to INN, declaring unsuccessful address negotiation due to unwillingness
		// Src: ANN
		// Dest: INN
		// Data: InetSocketAddress of client's MessageListener
		CONN_ANN_INN_FAIL,

		// Message from ANN to the client, declaring unsuccessful address negotiation
		// Src: INVALID_ADDRESS
		// Dest: INN
		// Data: InetSocketAddress of client's MessageListener
		CONN_ANN_EXT_FAIL,

		/**
		 * Messages exchanged during Phase 1: Determining possible attachment point
		 */

		// Message (outside the Cube) from external client to INN, requesting a CubeAddress
		// Src: INVALID_ADDRESS
		// Dest: INVALID_ADDRESS
		// Data: InetSocketAddress of client's MessageListener
		CONN_EXT_INN_ATTACH,

		// Message from INN to other Cube nodes, asking recipients for ability and willingness to accept connection
		// Src: INN
		// Dest: Broadcast
		// Data: InetSocketAddress of client's MessageListener
		CONN_INN_GEN_ANN,

		// Message from generic Cube node to INN, declaring ability and willingness to accept connection
		// Src: Connected node
		// Dest: INN
		// Data: InetSocketAddress of client's MessageListener
		CONN_GEN_INN_ACK,

		// Message from generic Cube node to INN, declaring inability to accept a connection
		// Src: Connected node
		// Dest: INN
		// Data: InetSocketAddress of client's MessageListener
		CONN_GEN_INN_UNABLE,

		// Message from generic Cube node to INN, declaring unwillingness to accept a connection
		// Src: Connected Node
		// Dest: INN
		// Data: InetSocketAddress of client's MessageListener
		CONN_GEN_INN_UNWILLING,

		// Message from INN to selected address negotiation node (ANN), tentatively handing off negotiation
		// Src: INN
		// Dest: Connected node
		// Data: InetSocketAddress of client's MessageListener
		CONN_INN_ANN_HANDOFF,

		// Message from INN to selected "unable" address negotiation node (ANN), tentatively handing off negotiation
		// Src: INN
		// Dest: Connected node
		// Data: InetSocketAddress of client's MessageListener
		CONN_INN_ANN_OVERRIDE,

		/**
		 * Messages exchanged during Phase 2: Confirming the attachment point
		 */

		// Message from ANN to new neighbor, asking for willingness to accept connection
		// Src: ANN
		// Dest: Connected node two hops from ANN (first hop is the tentative connection point)
		// Data: InetSocketAddress of client's MessageListener
		CONN_ANN_NBR_REQUEST,

		// Message from new neighbor to ANN, declaring willingness to accept connection
		// Src: Connected node two hops from ANN
		// Dest: ANN
		// Data: InetSocketAddress of client's MessageListener and a nonce generated by the neighbor
		CONN_NBR_ANN_ACK,

		// Message from new neighbor to ANN, declaring unwillingness to accept connection
		// Src: Connected node two hops from ANN
		// Dest: ANN
		// Data: InetSocketAddress of client's MessageListener
		CONN_NBR_ANN_NAK,

		/**
		 * Messages exchanged during Phase 3: Offering a CubeAddress to the client
		 */

		// Message (outside the Cube) from ANN to external client, offering it a new CubeAddress
		// Src: INVALID_ADDRESS
		// Dest: offered CubeAddress
		// Data: nonces generated by the new neighbors
		CONN_ANN_EXT_OFFER,

		// Message (outside the Cube) from external client to ANN, acknowledging (and accepting) the offer
		// Src: accepted CubeAddress
		// Dest: INVALID_ADDRESS
		// Data: nonces generated by the new neighbors
		CONN_EXT_ANN_ACK,

		// Message (outside the Cube) from external client to ANN, declining the offer
		// Src: INVALID_ADDRESS
		// Dest: INVALID_ADDRESS
		// Data: null
		CONN_EXT_ANN_NAK,

		// Message from ANN to new neighbor, requesting that neighbors attempt to connect
		// Src: ANN
		// Dest: Connected node two hops from ANN
		// Data: InetSocketAddress of client's MessageListener
		CONN_ANN_NBR_CONNECT,

		// Message from ANN to new neighbor, declaring negotiation a failure
		// Src: ANN
		// Dest: Connected node two hops from ANN
		// Data: InetSocketAddress of client's MessageListener
		CONN_ANN_NBR_FAIL,

		/**
		 * Messages exchanged during Phase 4: Neighbors all connect without revealing their CubeAddresses
		 */

		// Message (outside the Cube) from new neighbor to external client, offering to connect
		// Src: INVALID_ADDRESS
		// Dest: INVALID_ADDRESS
		// Data: null
		CONN_NBR_EXT_OFFER,

		// Message (outside the Cube) from external client to new neighbor, accepting the connection
		// Src: client's CubeAddress
		// Dest: INVALID_ADDRESS
		// Data: all of the nonces
		CONN_EXT_NBR_ACK,

		// Message (outside the Cube) from external client to new neighbor, declining the connection
		// Src: client's CubeAddress
		// Dest: INVALID_ADDRESS
		// Data: null
		CONN_EXT_NBR_NAK,

		// Message from new neighbor to ANN, indicating connection established
		// Src: Connected node two hops from ANN
		// Dest: ANN
		// Data: InetSocketAddress of client's MessageListener
		CONN_NBR_ANN_ESTABLISHED,

		// Message from new neighbor to ANN, indicating failed connection
		// Src: Connected node two hops from ANN
		// Dest: ANN
		// Data: InetSocketAddress of client's MessageListener
		CONN_NBR_ANN_NOCONN,

		// Message from ANN to new neighbors, indicating that advertising node addresses is okay
		// Src: ANN
		// Dest: Connected node two hops from ANN
		// Data: InetSocketAddress of client's MessageListener
		CONN_ANN_NBR_ADV,

		/**
		 * Messages exchanged during Phase 5: CubeAddress advertisement
		 */

		// Message (outside the Cube) from new neighbor to external client, completing the handshake
		// Src: neighbor's CubeAddress
		// Dest: client's CubeAddress
		// Data: null
		CONN_NBR_EXT_ACK,

		// Message from new neighbor to ANN, indicating that the
		// Src: neighbor's CubeAddress
		// Dest: client's CubeAddress
		// Data: null
		CONN_NBR_ANN_SUCCESS,

		// Message from new neighbor to ANN, asking for confirmation that all neighbors are connected
		// Src: neighbor's CubeAddress
		// Dest: client's CubeAddress
		// Data: null
		CONN_NBR_ANN_FAIL,

		// Message from ANN to client, declaring successful address negotiation
		// Src: ANN
		// Dest: connected client
		// Data: dimension of the Cube
		CONN_ANN_EXT_SUCCESS,

		// Message from ANN to INN, declaring successful address negotiation
		// Src: ANN
		// Dest: INN
		// Data: InetSocketAddress of client's MessageListener
		CONN_ANN_INN_SUCCESS,

		// Message from INN to unable ANNs, declaring successful address negotiation (somewhere else)
		// Src: INN
		// Dest: ANN
		// Data: InetSocketAddress of client's MessageListener
		CONN_INN_ANN_SUCCESS,

		/*
		 * Other messages
		 */

		// Message between Cube nodes, containing useful data
		// Data: arbitrary
		DATA_MSG,

		// Message from a Cube node, informing its neighbors that it's disconnecting
		// Data: (optional) String providing a reason
		NODE_SHUTDOWN,
	};

	// Source Cube address
	private CubeAddress src = CubeAddress.INVALID_ADDRESS;

	// Destination Cube address
	private CubeAddress dst = CubeAddress.INVALID_ADDRESS;

	// Path information used for route requests and broadcasts; see Katseff
	private BigInteger travel = new BigInteger("-1");

	// Hop count
	private int hopcount;

	// Type of message
	private Type type = Type.INVALID_MSG;

	// Payload data
	private Serializable data = null;

	// The SocketChannel this Message came from, if any
	private SocketChannel channel = null;

	@Override
	public String toString()
	{
		return "CubeMessage (" + src + "=>" + dst + ") type " + type + ", data: " + data;
	}

	/*
	 * Non-broadcast message constructor
	 */
	CubeMessage(CubeAddress src, CubeAddress dst, Type type, Serializable data) {
		this.src = src;
		this.dst = dst;
		this.type = type;
		this.data = data;
	}

	/*
	 * Broadcast message constructor
	 */
	CubeMessage(CubeAddress src, CubeAddress dst, Type type, Serializable data, int dim, int hopcount) {
		this.src = src;
		this.dst = dst;
		this.type = type;
		this.data = data;
		this.travel = BigInteger.ZERO.setBit(dim).subtract(BigInteger.ONE);
		this.hopcount = hopcount;
	}

	/**
	 * Send this message on a {@link SocketChannel}. Should be called only by the {@link CubeProtocol}.
	 * 
	 * @param chan
	 *            The {@link SocketChannel}
	 * @return Whether the message was sent
	 */
	boolean send(SocketChannel chan)
	{
		/*
		 * This is a non-blocking send; the receive on the other end is still blocking. Note that the channel is not
		 * serializeable, so we have to save it temporarily.
		 */
		try
		{
			// First, write ourselves onto a ByteArrayOutputStream (except for our channel, which is purely local)
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			SocketChannel ch = channel;
			channel = null;
			new ObjectOutputStream(baos).writeObject(this);
			channel = ch;

			// Next, determine our size, and write ourselves into a sized ByteBuffer
			int size = baos.toByteArray().length;
			ByteBuffer buf = ByteBuffer.allocate(size + 4);
			buf.putInt(size);
			buf.put(baos.toByteArray());

			// Finally, write the ByteBuffer to the indicated channel
			buf.rewind();
			while (buf.hasRemaining())
				chan.write(buf);
			return true;
		} catch (IOException e)
		{
			return false;
		}
	}

	/**
	 * Receive a message from a {@link SocketChannel}. Should be called only by the {@link MessageListener}. This passes
	 * along any IOExceptions for processing by the <code>MessageListener</code>, which has programmatic access to the
	 * corresponding {@link CubeProtocol}.
	 * 
	 * @param chan
	 *            The {@link SocketChannel}
	 * @return a received {@link CubeMessage}, or <code>null</code> if unsuccessful
	 * @throws IOException
	 */
	static CubeMessage recv(SocketChannel chan) throws IOException
	{
		// First, determine the size of the CubeMessage object
		ByteBuffer buf = ByteBuffer.allocate(4);
		chan.read(buf);
		buf.rewind();
		int size = buf.getInt();

		// Then, allocate a ByteBuffer and read the CubeMessage
		buf = ByteBuffer.allocate(size);
		while (buf.hasRemaining())
			chan.read(buf);

		// Finally, populate the message
		try
		{
			CubeMessage msg = (CubeMessage) new ObjectInputStream(new ByteArrayInputStream(buf.array())).readObject();
			msg.channel = chan;
			return msg;
		} catch (ClassNotFoundException e)
		{
			return null;
		}
	}

	public CubeAddress getSrc()
	{
		return src;
	}

	public CubeAddress getDst()
	{
		return dst;
	}

	// Called by CubeProtocol to implement broadcast
	BigInteger getTravel()
	{
		return travel;
	}

	// Called by CubeProtocol to implement broadcast
	void setTravel(BigInteger travel)
	{
		this.travel = travel;
	}

	// Called by CubeProtocol to implement broadcast
	int getHopcount()
	{
		return hopcount;
	}

	// Called by CubeProtocol to implement broadcast
	void reduceHopcount()
	{
		--hopcount;
	}

	public Type getType()
	{
		return type;
	}

	public Serializable getData()
	{
		return data;
	}

	SocketChannel getChannel()
	{
		return channel;
	}
}